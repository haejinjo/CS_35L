EXERCISE 1.1: MOVING AROUND IN EMACS


C-s P U B  M-f

C-s L a b M-b

C-s s e l f M-b

C-s a r r o w M-b

C-e

C-a

C-x C-c y





EXERCISE 1.2: DELETING TEXT IN EMACS

M-g g 18 <ENTER>  //go to line 18 

C-k

C-s < ! C-a  //search for the next HTML comment and go to beginning of it

C-k

C-s < ! 

C-<SPACE> 

M-} //drag mark to end of paragraph

<BACKSPACE>  //delete the old fashioned way 

C-s < !

<LEFTARROW><LEFTARROW>

M-z > //zap through the end of the HTML comment embedded in the line 

C-s < !

C-a 
C-k //the final kill 

C-x C-c y 




EXERCISE 1.3: INSERTING TEXT IN EMACS 

C-s A s s M-f C-f C-d 3 7
C-s A s s M-f C-f C-d 3 7

M-% U T F - 8 <ENTER>

U S - A S C I I <ENTER> ,

C-s < / o

C-a C-o //insert newline above 

C-x C-c y 

EXERCISE 1.4: OTHER EDITING TASKS IN EMACS

c a t  e x e r 2 . h t m l  e x e r 2 . d i f f  > e x e r 4 . h t m l
M-> //go to end of file

C-r - < <RIGHTARROW> C-<SPACE>  //search and select from bottom for first change
C-e
M-w //copy 
M-g g 3 5 2 //go to line specified by diff where change was originally made
C-y //past


C-r < !
C-r //find previous search
C-<SPACE><RIGHTARROW><RIGHTARROW><RIGHTARROW><RIGHTARROW><RIGHTARROW>
M-w
M-g g 3 3 7
M-b
C-y


C-r - < 
C-r
C-r
C-<SPACE>
M-}
M-w
M-g g 3 0 0
C-y

C-r - < 
C-r
C-r
C-r
C-<SPACE>
C-e
M-w
M-g g 9 0
C-y

C-r - < 
C-r 
C-r
C-r
C-r
C-<SPACE>
C-e
M-w
M-g g 1 5
C-y

C-<SPACE>
M->
<BACKSPACE>

C-x u //undo
- - >
C-r - - -
<UPARROW>
< ! - -

C-s <ol> //did this 7 times, found 7 instances

M-%
< o l > <ENTER>
< O l >
<SPACE><SPACE><SPACE><SPACE><SPACE><SPACE><SPACE>


EXERCISE 1.5: DOING COMMANDS IN EMACS

e m a c s
C-x d 
+ 		//create new directory
j u n k < ENTER>
C-x C-f h e l l o . c
M-x compile
M-! . / h e l l o
C-x b h e l l o - o u t //create new emacs buffer
C-x C-o //switch to output buffer
C-x C-p //select output
M-w //copy
C-x C-o //switch to hello-out
C-y //yank
M-x a p p e n d - t o - f i l e <ENTER>
<BACKSPACE><BACKSPACE><BACKSPACE><BACKSPACE>
C S _ 3 5 L / a s s 1 / k e y 1 . t x t
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c 
 char b = '%c%c\
';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, 
b, b, n, q, n, \
q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

EXERCISE 1.6: RUNNING ELISP CODE

C-x b <ENTER> //default is scratch buffer
( r a n d o m ) C-j
( s e t q  <SPACE> x <SPACE> ( r a n d o m ) ) C-j
(s e t q <SPACE> y <SPACE> ( r a n d o m ) ) C-j
( * <SPACE> x <SPACE> y ) C-j 

NOTE: Result of one big negative (x = -146144133080443572) and one big positive 
(y = 585579205419702285) equate
to one big BIG positive number 1237972361083860188. It is wrong due to integer 
overflow (learned that in Systems class)

M-: ( * x y )

NOTE: With the Meta key evaluation method, the product is the same number but 
positive: 1237972361083860188. 
  
NOTE: The two random integers are not truly random in the mathematical sense 
because, after generating them multiple
		times I notice an obvious pattern of every 3 numbers being 
negative. It's common in CS world, I realize, 
		for "random number generators" to actually be based on an 
algorithm that uses a reliably variable number
		like a time. 

NOTE:  Given that integers can possibly be 32 bits, and int max is about 2 
billion and int min its negative
          we could take the sum of all the possible products (4 billion ish) 
and use that as the demoninator for
          the number of total possible. We can then count the set of numbers 
that would NOT overflow the integer
	  result, giving a mathametically incorrect answer, up until the square 
root of int max. We can divide
	  the total number of possible products by the square root of int max 
as a result, because the latter
	  records the total number of int values that would safely multiply. 

